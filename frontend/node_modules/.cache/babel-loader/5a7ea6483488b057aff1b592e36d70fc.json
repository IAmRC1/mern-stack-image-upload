{"ast":null,"code":"const bufferToBase64 = buffer => {\n  let binary = '';\n  const bytes = [].slice.call(new Uint8Array(buffer));\n  bytes.forEach(b => binary += String.fromCharCode(b));\n  return window.btoa(binary);\n};\n\nexport { bufferToBase64 };","map":{"version":3,"sources":["/var/www/html/file-upload/frontend/src/utils.js"],"names":["bufferToBase64","buffer","binary","bytes","slice","call","Uint8Array","forEach","b","String","fromCharCode","window","btoa"],"mappings":"AAAA,MAAMA,cAAc,GAAIC,MAAD,IAAY;AACjC,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMC,KAAK,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAc,IAAIC,UAAJ,CAAeL,MAAf,CAAd,CAAd;AACAE,EAAAA,KAAK,CAACI,OAAN,CAAeC,CAAD,IAAON,MAAM,IAAIO,MAAM,CAACC,YAAP,CAAoBF,CAApB,CAA/B;AACA,SAAOG,MAAM,CAACC,IAAP,CAAYV,MAAZ,CAAP;AACD,CALD;;AAOA,SAASF,cAAT","sourcesContent":["const bufferToBase64 = (buffer) => {\n  let binary = '';\n  const bytes = [].slice.call(new Uint8Array(buffer));\n  bytes.forEach((b) => binary += String.fromCharCode(b));\n  return window.btoa(binary);\n}\n\nexport { bufferToBase64, }"]},"metadata":{},"sourceType":"module"}